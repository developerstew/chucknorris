{"version":3,"sources":["chuck.jpg","queries/queries.js","components/RandomJoke.js","components/CategoryJoke.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","RandomJOKES_QUERY","gql","CategoryJOKES_QUERY","JokeGenerator","id","style","textAlign","color","query","loading","error","data","refetch","random","value","onClick","Component","graphql","CategoryJokes","props","changeCategory","e","category","setState","state","type","variables","this","randomByCategory","client","ApolloClient","uri","App","className","src","logo","alt","width","display","margin","height","RandomJoke","CategoryJoke","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.35e826f9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chuck.709db853.jpg\";","import { gql } from 'apollo-boost';\r\n\r\nconst RandomJOKES_QUERY = gql`\r\n  query JokesQuery {\r\n    random {\r\n      value\r\n    }\r\n  }\r\n`;\r\n\r\nconst CategoryJOKES_QUERY = gql`\r\n  query category($category: String) {\r\n    randomByCategory(category: $category) {\r\n      value\r\n    }\r\n  }\r\n`;\r\n\r\nexport { RandomJOKES_QUERY, CategoryJOKES_QUERY };\r\n","import React, { Component } from 'react';\r\nimport { graphql } from 'react-apollo';\r\nimport { RandomJOKES_QUERY } from '../queries/queries';\r\nimport './css-files/random.css';\r\nimport { Query } from 'react-apollo';\r\n\r\nclass JokeGenerator extends Component {\r\n  // ***************************\r\n  //Just wanted to share another way I fetched the data below would love to know what you guys prefer\r\n  // ***************************\r\n  // displayJoke() {\r\n  //   var data = this.props.data;\r\n  //   console.log(data);\r\n  //   if (\r\n  //     this.state.randomJoke !== '' ||\r\n  //     this.state.randomJoke !== data.random.value\r\n  //   ) {\r\n  //     data.refetch({\r\n  //       query: RandomJOKES_QUERY,\r\n  //     });\r\n  //   }\r\n  //   if (data.loading) {\r\n  //     return <h4>Loading...</h4>;\r\n  //   } else {\r\n  //     return (\r\n  //       <div>\r\n  //         <p>{data.random.value}</p>\r\n  //       </div>\r\n  //     );\r\n  //   }\r\n  // }\r\n  render() {\r\n    return (\r\n      <div id='randomDiv' style={{ textAlign: 'center' }}>\r\n        <h3 style={{ color: '#3D72A4' }}>Random Chuck Joke</h3>\r\n        <Query query={RandomJOKES_QUERY}>\r\n          {({ loading, error, data, refetch }) => {\r\n            if (loading) return <p>Loading Joke...</p>;\r\n            if (error) return `Error! ${error}`;\r\n\r\n            return (\r\n              <div>\r\n                <h5>{data.random.value}</h5>\r\n                <button onClick={() => refetch()}>New Joke</button>\r\n              </div>\r\n            );\r\n          }}\r\n        </Query>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default graphql(RandomJOKES_QUERY)(JokeGenerator);\r\n","import React, { Component } from 'react';\r\nimport { graphql } from 'react-apollo';\r\nimport { CategoryJOKES_QUERY } from '../queries/queries';\r\nimport './css-files/category.css';\r\nimport { Query } from 'react-apollo';\r\n\r\nclass CategoryJokes extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      category: 'career',\r\n    };\r\n  }\r\n  changeCategory = (e, category) => {\r\n    this.setState({\r\n      category: category,\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div id='categoryDiv'>\r\n        <h2 id='title'>Chuck Joke by Category</h2>\r\n        <a type='button' onClick={(e) => this.changeCategory(e, 'animal')}>\r\n          Animal\r\n        </a>\r\n        <a type='button' onClick={(e) => this.changeCategory(e, 'career')}>\r\n          Career\r\n        </a>\r\n        <a type='button' onClick={(e) => this.changeCategory(e, 'celebrity')}>\r\n          Celebrity\r\n        </a>\r\n        <a type='button' onClick={(e) => this.changeCategory(e, 'dev')}>\r\n          Dev\r\n        </a>\r\n        <a type='button' onClick={(e) => this.changeCategory(e, 'explicit')}>\r\n          Explicit\r\n        </a>\r\n        <a type='button' onClick={(e) => this.changeCategory(e, 'fashion')}>\r\n          Fashion\r\n        </a>\r\n        <a type='button' onClick={(e) => this.changeCategory(e, 'food')}>\r\n          Food\r\n        </a>\r\n        <a type='button' onClick={(e) => this.changeCategory(e, 'history')}>\r\n          History\r\n        </a>\r\n        <a type='button' onClick={(e) => this.changeCategory(e, 'money')}>\r\n          Money\r\n        </a>\r\n        <a type='button' onClick={(e) => this.changeCategory(e, 'movie')}>\r\n          Movie\r\n        </a>\r\n        <a type='button' onClick={(e) => this.changeCategory(e, 'music')}>\r\n          Music\r\n        </a>\r\n        <a type='button' onClick={(e) => this.changeCategory(e, 'political')}>\r\n          Political\r\n        </a>\r\n        <a type='button' onClick={(e) => this.changeCategory(e, 'religion')}>\r\n          Religion\r\n        </a>\r\n        <a type='button' onClick={(e) => this.changeCategory(e, 'science')}>\r\n          Science\r\n        </a>\r\n        <a type='button' onClick={(e) => this.changeCategory(e, 'sport')}>\r\n          Sport\r\n        </a>\r\n        <a type='button' onClick={(e) => this.changeCategory(e, 'travel')}>\r\n          Travel\r\n        </a>\r\n        <Query\r\n          query={CategoryJOKES_QUERY}\r\n          variables={{ category: this.state.category }}\r\n        >\r\n          {({ loading, error, data, refetch }) => {\r\n            if (loading) return <p>Loading Joke...</p>;\r\n            if (error) return `Error! ${error}`;\r\n\r\n            return (\r\n              <div>\r\n                <h5>{data.randomByCategory.value}</h5>\r\n                <button onClick={() => refetch()}>Refetch!</button>\r\n              </div>\r\n            );\r\n          }}\r\n        </Query>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default graphql(CategoryJOKES_QUERY)(CategoryJokes);\r\n","import React from 'react';\nimport './App.css';\nimport logo from './chuck.jpg';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n\n// Components\nimport RandomJoke from './components/RandomJoke';\nimport CategoryJoke from './components/CategoryJoke';\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <div className='container'>\n        <img\n          src={logo}\n          alt=''\n          style={{ width: 300, display: 'block', margin: 'auto', height: 300 }}\n        />\n        <h2\n          style={{\n            display: 'block',\n            color: 'white',\n            textAlign: 'center',\n          }}\n        >\n          Who is up for a laugh?\n        </h2>\n      </div>\n      <br />\n      <div className='container-fluid'>\n        <RandomJoke />\n        <CategoryJoke />\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}